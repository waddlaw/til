1:1-1:1::Main.$trModule :: "GHC.Types.Module"
4:1-4:4::Main.die :: "{VV : [GHC.Types.Char] | false} -> a"
4:5-4:8::msg :: "{VV : [GHC.Types.Char] | false}"
4:11-4:16::_ :: "{v : [GHC.Types.Char] | false} -> a"
8:1-8:7::Main.divide :: "GHC.Types.Int -> {v : GHC.Types.Int | v /= 0} -> GHC.Types.Int"
8:8-8:9::n :: "GHC.Types.Int"
8:14-8:34::lq_anf$##7205759403792803651 :: "[GHC.Types.Char]"
9:14-9:23::ds_d2Bg :: "{v : GHC.Types.Int | v /= 0}"
9:16-9:21::_ :: "x1:GHC.Types.Int -> x2:{v : GHC.Types.Int | v /= 0} -> {v : GHC.Types.Int | v == x1 / x2\n                                                                            && (x1 >= 0\n                                                                                && x2 >= 0 => v >= 0)\n                                                                            && (x1 >= 0\n                                                                                && x2 >= 1 => v <= x1)\n                                                                            && (1 < x2 => v < x1)\n                                                                            && (x2 >= 1 => v <= x1)}"
15:1-15:4::Main.avg :: "[GHC.Types.Int] -> GHC.Types.Int"
16:10-16:16::_ :: "{v : GHC.Types.Int -> {v : GHC.Types.Int | v /= 0} -> GHC.Types.Int | v == Main.divide}"
18:5-18:10::total :: "GHC.Types.Int"
18:13-18:16::_ :: "[GHC.Types.Int] -> GHC.Types.Int"
19:5-19:6::n :: "{v : GHC.Types.Int | v >= 0}"
19:9-19:15::_ :: "xs:[GHC.Types.Int] -> {v : GHC.Types.Int | v >= 0\n                                           && v == len xs}"
26:1-26:8::Main.lAssert :: "{v : GHC.Types.Bool | v} -> a -> a"
26:14-26:15::x :: "a"
27:19-27:48::lq_anf$##7205759403792803638 :: "[GHC.Types.Char]"
29:1-29:4::Main.yes :: "()"
29:7-29:27::_ :: "() -> ()"
29:16-29:21::lq_anf$##7205759403792803641 :: "GHC.Integer.Type.Integer"
29:18-29:19::_ :: "x1:GHC.Integer.Type.Integer -> x2:GHC.Integer.Type.Integer -> {v : GHC.Integer.Type.Integer | v == x1 + x2}"
29:22-29:24::_ :: "x1:GHC.Integer.Type.Integer -> x2:GHC.Integer.Type.Integer -> {v : GHC.Types.Bool | v <=> x1 == x2}"