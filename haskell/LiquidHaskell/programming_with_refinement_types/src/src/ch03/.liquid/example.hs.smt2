(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)
(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort Set () (Array Elt Bool))
(define-fun smt_set_emp () Set ((as const Set) false))
(define-fun smt_set_mem ((x Elt) (s Set)) Bool (select s x))
(define-fun smt_set_add ((s Set) (x Elt)) Set (store s x true))
(define-fun smt_set_cup ((s1 Set) (s2 Set)) Set ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 Set) (s2 Set)) Set ((_ map and) s1 s2))
(define-fun smt_set_com ((s Set)) Set ((_ map not) s))
(define-fun smt_set_dif ((s1 Set) (s2 Set)) Set (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 Set) (s2 Set)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun runFun () Int)
(declare-fun cast_as_int () Int)
(declare-fun lit$36$horrible$32$death () Str)
(declare-fun VV$35$$35$1782 () Int)
(declare-fun n$35$$35$a1TV () Int)
(declare-fun VV$35$$35$1555 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804733$35$$35$d2Tz () Str)
(declare-fun VV$35$$35$1728 () Int)
(declare-fun lq_tmp$36$x$35$$35$469 () Int)
(declare-fun addrLen () Int)
(declare-fun VV$35$$35$1805 () Int)
(declare-fun VV$35$$35$1827 () Int)
(declare-fun papp5 () Int)
(declare-fun VV$35$$35$1959 () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun x_Tuple65 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804757$35$$35$d2TX () Str)
(declare-fun lq_tmp$36$x$35$$35$614 () Int)
(declare-fun VV$35$$35$F$35$$35$1 () Int)
(declare-fun max$35$$35$a2iY () Int)
(declare-fun x_Tuple55 () Int)
(declare-fun lit$36$Enter$32$denominator () Str)
(declare-fun VV$35$$35$2270 () Int)
(declare-fun VV$35$$35$2049 () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lit$36$divide$32$by$32$zero () Str)
(declare-fun GHC.Types.LT () Int)
(declare-fun x_Tuple77 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804777$35$$35$d2Uh () Int)
(declare-fun VV$35$$35$2072 () Int)
(declare-fun VV$35$$35$2115 () Int)
(declare-fun VV$35$$35$1865 () Int)
(declare-fun VV$35$$35$1920 () Int)
(declare-fun VV$35$$35$1614 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804739$35$$35$d2TF () Str)
(declare-fun papp3 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804787$35$$35$d2Ur () Int)
(declare-fun VV$35$$35$1946 () Int)
(declare-fun x_Tuple63 () Int)
(declare-fun VV$35$$35$1939 () Int)
(declare-fun lq_tmp$36$x$35$$35$1185 () Int)
(declare-fun x_Tuple41 () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lq_tmp$36$x$35$$35$577 () Int)
(declare-fun VV$35$$35$1571 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804793$35$$35$d2Ux () Int)
(declare-fun lq_tmp$36$x$35$$35$1553 () Int)
(declare-fun lq_tmp$36$x$35$$35$1209 () Int)
(declare-fun lit$36$error () Str)
(declare-fun VV$35$$35$1927 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804748$35$$35$d2TO () Int)
(declare-fun VV$35$$35$2142 () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Read.$36$fReadInt () Int)
(declare-fun lq_tmp$36$x$35$$35$1254 () Int)
(declare-fun VV$35$$35$1581 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804740$35$$35$d2TG () Str)
(declare-fun x_Tuple64 () Int)
(declare-fun VV$35$$35$1840 () Int)
(declare-fun VV$35$$35$1682 () Int)
(declare-fun VV$35$$35$F$35$$35$29 () Str)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Stack.Types.SrcLoc () Int)
(declare-fun x$35$$35$a2iW () Int)
(declare-fun GHC.Num.$36$fNumInt () Int)
(declare-fun lq_tmp$36$x$35$$35$1042 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804759$35$$35$d2TZ () Int)
(declare-fun x$35$$35$a22I () Int)
(declare-fun VV$35$$35$1696 () Int)
(declare-fun VV$35$$35$1724 () Int)
(declare-fun VV$35$$35$1999 () Int)
(declare-fun autolen () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804736$35$$35$d2TC () Str)
(declare-fun msg$35$$35$aRr () Str)
(declare-fun x_Tuple52 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804755$35$$35$d2TV () Bool)
(declare-fun head () Int)
(declare-fun VV$35$$35$1911 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804734$35$$35$d2TA () Str)
(declare-fun VV$35$$35$F$35$$35$24 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804751$35$$35$d2TR () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804775$35$$35$d2Uf () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792804794$35$$35$d2Uy () Bool)
(declare-fun VV$35$$35$1785 () Int)
(declare-fun lq_tmp$36$x$35$$35$576 () Int)
(declare-fun VV$35$$35$1992 () Int)
(declare-fun VV$35$$35$1648 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804771$35$$35$d2Ub () Int)
(declare-fun papp2 () Int)
(declare-fun VV$35$$35$1750 () Int)
(declare-fun x_Tuple62 () Int)
(declare-fun lit$36$Main () Str)
(declare-fun VV$35$$35$1878 () Int)
(declare-fun GHC.Stack.Types.emptyCallStack () Int)
(declare-fun n$35$$35$a27l () Int)
(declare-fun lit$36$main () Str)
(declare-fun i$39$$35$$35$a2iZ () Int)
(declare-fun fromJust () Int)
(declare-fun papp7 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804769$35$$35$d2U9 () Int)
(declare-fun Main.one () Int)
(declare-fun VV$35$$35$1679 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804765$35$$35$d2U5 () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792804766$35$$35$d2U6 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804742$35$$35$d2TI () Int)
(declare-fun x_Tuple53 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804791$35$$35$d2Uv () Bool)
(declare-fun VV$35$$35$1778 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_tmp$36$x$35$$35$622 () Int)
(declare-fun lit$36$Result$32$$61$$32$ () Str)
(declare-fun n$35$$35$a22N () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 () Int)
(declare-fun Main.two () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804763$35$$35$d2U3 () Int)
(declare-fun VV$35$$35$F$35$$35$25 () Int)
(declare-fun VV$35$$35$2030 () Int)
(declare-fun VV$35$$35$2012 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804764$35$$35$d2U4 () Str)
(declare-fun lq_tmp$36$x$35$$35$1043 () Int)
(declare-fun fix$36$$36$dIP_a2vJ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804768$35$$35$d2U8 () Int)
(declare-fun lq_tmp$36$x$35$$35$1078 () Int)
(declare-fun x_Tuple71 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804796$35$$35$d2UA () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804767$35$$35$d2U7 () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804761$35$$35$d2U1 () Int)
(declare-fun VV$35$$35$2056 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804746$35$$35$d2TM () Int)
(declare-fun lq_tmp$36$x$35$$35$726 () Int)
(declare-fun fldList () Int)
(declare-fun VV$35$$35$1665 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804753$35$$35$d2TT () Int)
(declare-fun GHC.Base.$36$fMonadIO () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804784$35$$35$d2Uo () Int)
(declare-fun ds_d2Tf () Int)
(declare-fun lq_tmp$36$x$35$$35$829 () Int)
(declare-fun VV$35$$35$1621 () Int)
(declare-fun lq_tmp$36$x$35$$35$1301 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun VV$35$$35$F$35$$35$20 () Int)
(declare-fun VV$35$$35$2068 () Int)
(declare-fun VV$35$$35$1885 () Bool)
(declare-fun VV$35$$35$2248 () Int)
(declare-fun GHC.Integer.Type.$36$fEqInteger () Int)
(declare-fun Main.cannotDie () Int)
(declare-fun y$35$$35$a22L () Int)
(declare-fun GHC.Classes.$36$fOrdInt () Int)
(declare-fun x_Tuple74 () Int)
(declare-fun VV$35$$35$F$35$$35$39 () Int)
(declare-fun lit$36$Enter$32$numerator () Str)
(declare-fun VV$35$$35$1574 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804773$35$$35$d2Ud () Bool)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun lit$36$Humph$44$$32$please$32$enter$32$positive$32$denominator$33$ () Str)
(declare-fun x_Tuple22 () Int)
(declare-fun x_Tuple66 () Int)
(declare-fun x_Tuple44 () Int)
(declare-fun VV$35$$35$1709 () Int)
(declare-fun VV$35$$35$2261 () Int)
(declare-fun Main.zero () Int)
(declare-fun VV$35$$35$F$35$$35$32 () Str)
(declare-fun VV$35$$35$F$35$$35$26 () Str)
(declare-fun VV$35$$35$1762 () Int)
(declare-fun x$35$$35$a22K () Int)
(declare-fun VV$35$$35$1740 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804752$35$$35$d2TS () Int)
(declare-fun x_Tuple72 () Int)
(declare-fun y$35$$35$a22J () Int)
(declare-fun VV$35$$35$F$35$$35$40 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804756$35$$35$d2TW () Str)
(declare-fun VV$35$$35$2257 () Int)
(declare-fun isJust () Int)
(declare-fun max$39$$35$$35$a2j0 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804754$35$$35$d2TU () Bool)
(declare-fun lit$36$$47$home$47$bm12$47$repo$47$guchi$47$til$47$haskell$47$LiquidHaskell$47$programming_with_refinement_types$47$src$45$dir$47$src$47$ch03$47$example.hs () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792804735$35$$35$d2TB () Str)
(declare-fun VV$35$$35$F$35$$35$4 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804750$35$$35$d2TQ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804781$35$$35$d2Ul () Int)
(declare-fun VV$35$$35$1949 () Int)
(declare-fun Main.$36$trModule () Int)
(declare-fun d$35$$35$a27m () Int)
(declare-fun VV$35$$35$2087 () Int)
(declare-fun VV$35$$35$F$35$$35$21 () Bool)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_tmp$36$x$35$$35$983 () Int)
(declare-fun x_Tuple75 () Int)
(declare-fun VV$35$$35$F$35$$35$38 () Int)
(declare-fun lq_tmp$36$x$35$$35$929 () Int)
(declare-fun lq_tmp$36$x$35$$35$578 () Int)
(declare-fun GHC.Show.$36$fShowInt () Int)
(declare-fun VV$35$$35$2168 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804744$35$$35$d2TK () Int)
(declare-fun papp1 () Int)
(declare-fun lq_tmp$36$x$35$$35$676 () Int)
(declare-fun x_Tuple61 () Int)
(declare-fun VV$35$$35$1818 () Int)
(declare-fun x_Tuple43 () Int)
(declare-fun Main.calc () Int)
(declare-fun VV$35$$35$2039 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804786$35$$35$d2Uq () Int)
(declare-fun GHC.Num.$36$fNumInteger () Int)
(declare-fun VV$35$$35$2244 () Int)
(declare-fun VV$35$$35$2046 () Int)
(declare-fun tail () Int)
(declare-fun VV$35$$35$2219 () Int)
(declare-fun n$35$$35$a27j () Int)
(declare-fun VV$35$$35$2002 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804738$35$$35$d2TE () Str)
(declare-fun lq_tmp$36$x$35$$35$942 () Int)
(declare-fun lq_tmp$36$x$35$$35$1169 () Int)
(declare-fun VV$35$$35$1900 () Int)
(declare-fun VV$35$$35$1801 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804749$35$$35$d2TP () Int)
(declare-fun i$35$$35$a2iX () Int)
(declare-fun VV$35$$35$1662 () Int)
(declare-fun VV$35$$35$2111 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804741$35$$35$d2TH () Int)
(declare-fun VV$35$$35$F$35$$35$5 () Int)
(declare-fun VV$35$$35$1956 () Int)
(declare-fun x_Tuple51 () Int)
(declare-fun Main.three () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804745$35$$35$d2TL () Int)
(declare-fun VV$35$$35$1930 () Int)
(declare-fun VV$35$$35$1831 () Int)
(declare-fun d$35$$35$a27k () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw () Bool)
(declare-fun VV$35$$35$1705 () Int)
(declare-fun VV$35$$35$F$35$$35$27 () Int)
(declare-fun VV$35$$35$2274 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804743$35$$35$d2TJ () Int)
(declare-fun x_Tuple73 () Int)
(declare-fun VV$35$$35$2009 () Int)
(declare-fun VV$35$$35$F$35$$35$41 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun VV$35$$35$1983 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804747$35$$35$d2TN () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804790$35$$35$d2Uu () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804737$35$$35$d2TD () Str)
(declare-fun VV$35$$35$1869 () Int)
(declare-fun z$35$$35$a22M () Int)
(declare-fun ds_d2Td () Int)
(declare-fun VV$35$$35$1564 () Int)
(declare-fun x_Tuple54 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_tmp$36$x$35$$35$1044 () Int)
(declare-fun VV$35$$35$1744 () Int)
(declare-fun x_Tuple76 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804776$35$$35$d2Ug () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792804770$35$$35$d2Ua () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804772$35$$35$d2Uc () Bool)
(declare-fun lq_tmp$36$x$35$$35$1168 () Int)
(declare-fun VV$35$$35$2164 () Int)
(declare-fun VV$35$$35$2146 () Int)
(declare-fun VV$35$$35$2223 () Int)
(declare-fun GHC.Real.$36$fIntegralInt () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun VV$35$$35$1844 () Int)
(declare-fun x_Tuple42 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804795$35$$35$d2Uz () Bool)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)

(assert (distinct lit$36$$47$home$47$bm12$47$repo$47$guchi$47$til$47$haskell$47$LiquidHaskell$47$programming_with_refinement_types$47$src$45$dir$47$src$47$ch03$47$example.hs lit$36$Humph$44$$32$please$32$enter$32$positive$32$denominator$33$ lit$36$Enter$32$numerator lit$36$Result$32$$61$$32$ lit$36$main lit$36$Main lit$36$error lit$36$divide$32$by$32$zero lit$36$Enter$32$denominator lit$36$horrible$32$death))
(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$horrible$32$death) 14))
(assert (= (strLen lit$36$Enter$32$denominator) 17))
(assert (= (strLen lit$36$divide$32$by$32$zero) 14))
(assert (= (strLen lit$36$error) 5))
(assert (= (strLen lit$36$Main) 4))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$Result$32$$61$$32$) 9))
(assert (= (strLen lit$36$Enter$32$numerator) 15))
(assert (= (strLen lit$36$Humph$44$$32$please$32$enter$32$positive$32$denominator$33$) 41))
(assert (= (strLen lit$36$$47$home$47$bm12$47$repo$47$guchi$47$til$47$haskell$47$LiquidHaskell$47$programming_with_refinement_types$47$src$45$dir$47$src$47$ch03$47$example.hs) 109))
(push 1)
(assert false)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (= lq_anf$36$$35$$35$7205759403792804795$35$$35$d2Uz (<= i$39$$35$$35$a2iZ max$39$$35$$35$a2j0)) (= lq_anf$36$$35$$35$7205759403792804795$35$$35$d2Uz lq_anf$36$$35$$35$7205759403792804794$35$$35$d2Uy)) (and (>= VV$35$$35$F$35$$35$1 0) (= VV$35$$35$F$35$$35$1 i$39$$35$$35$a2iZ)) (and (= lq_anf$36$$35$$35$7205759403792804795$35$$35$d2Uz (<= i$39$$35$$35$a2iZ max$39$$35$$35$a2j0)) (= lq_anf$36$$35$$35$7205759403792804795$35$$35$d2Uz lq_anf$36$$35$$35$7205759403792804794$35$$35$d2Uy)) (not GHC.Types.False) (and (= lq_anf$36$$35$$35$7205759403792804795$35$$35$d2Uz (<= i$39$$35$$35$a2iZ max$39$$35$$35$a2j0)) (= lq_anf$36$$35$$35$7205759403792804795$35$$35$d2Uz lq_anf$36$$35$$35$7205759403792804794$35$$35$d2Uy) (not lq_anf$36$$35$$35$7205759403792804795$35$$35$d2Uz) (not lq_anf$36$$35$$35$7205759403792804795$35$$35$d2Uz) (not lq_anf$36$$35$$35$7205759403792804795$35$$35$d2Uz)) GHC.Types.True (not GHC.Types.False) GHC.Types.True (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (not (= Main.one 0)) (not (= Main.two 0)) (not (= Main.three 0)) (>= max$39$$35$$35$a2j0 0) (>= i$39$$35$$35$a2iZ 0) (= lq_anf$36$$35$$35$7205759403792804794$35$$35$d2Uy (<= i$39$$35$$35$a2iZ max$39$$35$$35$a2j0))))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$1 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (= VV$35$$35$F$35$$35$4 n$35$$35$a22N) (not GHC.Types.False) GHC.Types.True (= lq_anf$36$$35$$35$7205759403792804790$35$$35$d2Uu 0) (not GHC.Types.False) (= lq_anf$36$$35$$35$7205759403792804791$35$$35$d2Uv (< lq_anf$36$$35$$35$7205759403792804790$35$$35$d2Uu n$35$$35$a22N)) GHC.Types.True (and (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw (< lq_anf$36$$35$$35$7205759403792804790$35$$35$d2Uu n$35$$35$a22N)) (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw lq_anf$36$$35$$35$7205759403792804791$35$$35$d2Uv)) (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (not (= Main.one 0)) (not (= Main.two 0)) (not (= Main.three 0)) (and (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw (< lq_anf$36$$35$$35$7205759403792804790$35$$35$d2Uu n$35$$35$a22N)) (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw lq_anf$36$$35$$35$7205759403792804791$35$$35$d2Uv)) (and (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw (< lq_anf$36$$35$$35$7205759403792804790$35$$35$d2Uu n$35$$35$a22N)) (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw lq_anf$36$$35$$35$7205759403792804791$35$$35$d2Uv) lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw)))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$4 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (= lq_anf$36$$35$$35$7205759403792804775$35$$35$d2Uf lit$36$Result$32$$61$$32$) (and (= lq_anf$36$$35$$35$7205759403792804776$35$$35$d2Ug lq_anf$36$$35$$35$7205759403792804775$35$$35$d2Uf) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792804776$35$$35$d2Ug) (strLen lq_anf$36$$35$$35$7205759403792804775$35$$35$d2Uf)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792804776$35$$35$d2Ug) 0)) (not GHC.Types.False) (= VV$35$$35$F$35$$35$20 d$35$$35$a27m) GHC.Types.True (not GHC.Types.False) GHC.Types.True (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (not (= Main.one 0)) (not (= Main.two 0)) (not (= Main.three 0)) (= lq_anf$36$$35$$35$7205759403792804772$35$$35$d2Uc (> d$35$$35$a27m 0)) (and (= lq_anf$36$$35$$35$7205759403792804773$35$$35$d2Ud (> d$35$$35$a27m 0)) (= lq_anf$36$$35$$35$7205759403792804773$35$$35$d2Ud lq_anf$36$$35$$35$7205759403792804772$35$$35$d2Uc)) (and (= lq_anf$36$$35$$35$7205759403792804773$35$$35$d2Ud (> d$35$$35$a27m 0)) (= lq_anf$36$$35$$35$7205759403792804773$35$$35$d2Ud lq_anf$36$$35$$35$7205759403792804772$35$$35$d2Uc)) (and (= lq_anf$36$$35$$35$7205759403792804773$35$$35$d2Ud (> d$35$$35$a27m 0)) (= lq_anf$36$$35$$35$7205759403792804773$35$$35$d2Ud lq_anf$36$$35$$35$7205759403792804772$35$$35$d2Uc) lq_anf$36$$35$$35$7205759403792804773$35$$35$d2Ud lq_anf$36$$35$$35$7205759403792804773$35$$35$d2Ud lq_anf$36$$35$$35$7205759403792804773$35$$35$d2Ud)))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$20 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not GHC.Types.False) GHC.Types.True (= lq_anf$36$$35$$35$7205759403792804790$35$$35$d2Uu 0) (= VV$35$$35$F$35$$35$5 (- lq_anf$36$$35$$35$7205759403792804793$35$$35$d2Ux n$35$$35$a22N)) (not GHC.Types.False) (= lq_anf$36$$35$$35$7205759403792804791$35$$35$d2Uv (< lq_anf$36$$35$$35$7205759403792804790$35$$35$d2Uu n$35$$35$a22N)) GHC.Types.True (and (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw (< lq_anf$36$$35$$35$7205759403792804790$35$$35$d2Uu n$35$$35$a22N)) (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw lq_anf$36$$35$$35$7205759403792804791$35$$35$d2Uv)) (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (and (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw (< lq_anf$36$$35$$35$7205759403792804790$35$$35$d2Uu n$35$$35$a22N)) (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw lq_anf$36$$35$$35$7205759403792804791$35$$35$d2Uv)) (not (= Main.one 0)) (and (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw (< lq_anf$36$$35$$35$7205759403792804790$35$$35$d2Uu n$35$$35$a22N)) (= lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw lq_anf$36$$35$$35$7205759403792804791$35$$35$d2Uv) (not lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw) (not lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw) (not lq_anf$36$$35$$35$7205759403792804792$35$$35$d2Uw)) (not (= Main.two 0)) (= lq_anf$36$$35$$35$7205759403792804793$35$$35$d2Ux 0) (not (= Main.three 0))))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$5 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not GHC.Types.False) GHC.Types.True (not GHC.Types.False) (= VV$35$$35$F$35$$35$21 (> x$35$$35$a2iW lq_anf$36$$35$$35$7205759403792804771$35$$35$d2Ub)) GHC.Types.True (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (= lq_anf$36$$35$$35$7205759403792804771$35$$35$d2Ub 0) (not (= Main.one 0)) (not (= Main.two 0)) (not (= Main.three 0))))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$21 (> x$35$$35$a2iW 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not GHC.Types.False) GHC.Types.True (not GHC.Types.False) GHC.Types.True (= VV$35$$35$F$35$$35$38 3) (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (not (= Main.one 0)) (not (= Main.two 0))))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$38 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not GHC.Types.False) GHC.Types.True (not GHC.Types.False) GHC.Types.True (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (= VV$35$$35$F$35$$35$39 2) (not (= Main.one 0))))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$39 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not GHC.Types.False) (= lq_anf$36$$35$$35$7205759403792804768$35$$35$d2U8 (+ x$35$$35$a22K y$35$$35$a22L)) GHC.Types.True (= lq_anf$36$$35$$35$7205759403792804769$35$$35$d2U9 (+ lq_anf$36$$35$$35$7205759403792804768$35$$35$d2U8 z$35$$35$a22M)) (not GHC.Types.False) (= lq_anf$36$$35$$35$7205759403792804770$35$$35$d2Ua 3) GHC.Types.True (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (not (= Main.one 0)) (and (= VV$35$$35$F$35$$35$24 3) (= VV$35$$35$F$35$$35$24 lq_anf$36$$35$$35$7205759403792804770$35$$35$d2Ua)) (not (= Main.two 0)) (not (= Main.three 0))))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$24 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not GHC.Types.False) GHC.Types.True (not GHC.Types.False) GHC.Types.True (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (= VV$35$$35$F$35$$35$40 1)))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$40 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not GHC.Types.False) GHC.Types.True (not GHC.Types.False) GHC.Types.True (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (not (= Main.one 0)) (not (= Main.two 0)) (not (= Main.three 0)) (and (= VV$35$$35$F$35$$35$25 2) (= VV$35$$35$F$35$$35$25 lq_anf$36$$35$$35$7205759403792804767$35$$35$d2U7)) (= lq_anf$36$$35$$35$7205759403792804766$35$$35$d2U6 (+ x$35$$35$a22I y$35$$35$a22J)) (= lq_anf$36$$35$$35$7205759403792804767$35$$35$d2U7 2)))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$25 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not GHC.Types.False) GHC.Types.True (not GHC.Types.False) GHC.Types.True (= VV$35$$35$F$35$$35$41 0)))
(push 1)
(assert (not (and (< VV$35$$35$F$35$$35$41 100) (= (mod VV$35$$35$F$35$$35$41 2) 0) (>= VV$35$$35$F$35$$35$41 0) (= VV$35$$35$F$35$$35$41 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (= ds_d2Td 0)) (not GHC.Types.False) (and (not (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 0)) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Td)) GHC.Types.True (and (not (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 0)) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Td)) (not GHC.Types.False) GHC.Types.True (and (not (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 0)) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Td) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Tf) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Tf) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Tf)) (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (= lq_anf$36$$35$$35$7205759403792804763$35$$35$d2U3 ds_d2Tf) (not (= Main.one 0)) (not (= Main.two 0)) (and (= lq_anf$36$$35$$35$7205759403792804763$35$$35$d2U3 ds_d2Tf) (= lq_anf$36$$35$$35$7205759403792804763$35$$35$d2U3 0)) (not (= Main.three 0)) (= lq_anf$36$$35$$35$7205759403792804764$35$$35$d2U4 lit$36$divide$32$by$32$zero) (and (= lq_anf$36$$35$$35$7205759403792804765$35$$35$d2U5 lq_anf$36$$35$$35$7205759403792804764$35$$35$d2U4) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792804765$35$$35$d2U5) (strLen lq_anf$36$$35$$35$7205759403792804764$35$$35$d2U4)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792804765$35$$35$d2U5) 0)) (and (= VV$35$$35$F$35$$35$26 lq_anf$36$$35$$35$7205759403792804764$35$$35$d2U4) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$26) (strLen lq_anf$36$$35$$35$7205759403792804764$35$$35$d2U4)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$26) 0) (= VV$35$$35$F$35$$35$26 lq_anf$36$$35$$35$7205759403792804765$35$$35$d2U5) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$26) 0))))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (= ds_d2Td 0)) (not GHC.Types.False) (and (not (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 0)) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Td)) GHC.Types.True (and (not (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 0)) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Td)) (not GHC.Types.False) GHC.Types.True (and (not (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 0)) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Td) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Tf) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Tf) (= lq_anf$36$$35$$35$7205759403792804762$35$$35$d2U2 ds_d2Tf)) (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (= lq_anf$36$$35$$35$7205759403792804763$35$$35$d2U3 ds_d2Tf) (not (= Main.one 0)) (and (= lq_anf$36$$35$$35$7205759403792804763$35$$35$d2U3 ds_d2Tf) (not (= lq_anf$36$$35$$35$7205759403792804763$35$$35$d2U3 0))) (not (= Main.two 0)) (not (= Main.three 0)) (and (not (= VV$35$$35$F$35$$35$27 0)) (= VV$35$$35$F$35$$35$27 ds_d2Td))))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$27 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (= lq_anf$36$$35$$35$7205759403792804752$35$$35$d2TS (+ lq_anf$36$$35$$35$7205759403792804750$35$$35$d2TQ lq_anf$36$$35$$35$7205759403792804751$35$$35$d2TR)) (= lq_anf$36$$35$$35$7205759403792804753$35$$35$d2TT 3) (not GHC.Types.False) (= lq_anf$36$$35$$35$7205759403792804754$35$$35$d2TU (= lq_anf$36$$35$$35$7205759403792804752$35$$35$d2TS lq_anf$36$$35$$35$7205759403792804753$35$$35$d2TT)) GHC.Types.True (and (= lq_anf$36$$35$$35$7205759403792804755$35$$35$d2TV (= lq_anf$36$$35$$35$7205759403792804752$35$$35$d2TS lq_anf$36$$35$$35$7205759403792804753$35$$35$d2TT)) (= lq_anf$36$$35$$35$7205759403792804755$35$$35$d2TV lq_anf$36$$35$$35$7205759403792804754$35$$35$d2TU)) (not GHC.Types.False) GHC.Types.True (and (< Main.zero 100) (= (mod Main.zero 2) 0) (>= Main.zero 0) (= Main.zero 0)) (and (= lq_anf$36$$35$$35$7205759403792804755$35$$35$d2TV (= lq_anf$36$$35$$35$7205759403792804752$35$$35$d2TS lq_anf$36$$35$$35$7205759403792804753$35$$35$d2TT)) (= lq_anf$36$$35$$35$7205759403792804755$35$$35$d2TV lq_anf$36$$35$$35$7205759403792804754$35$$35$d2TU)) (not (= Main.one 0)) (and (= lq_anf$36$$35$$35$7205759403792804755$35$$35$d2TV (= lq_anf$36$$35$$35$7205759403792804752$35$$35$d2TS lq_anf$36$$35$$35$7205759403792804753$35$$35$d2TT)) (= lq_anf$36$$35$$35$7205759403792804755$35$$35$d2TV lq_anf$36$$35$$35$7205759403792804754$35$$35$d2TU) lq_anf$36$$35$$35$7205759403792804755$35$$35$d2TV lq_anf$36$$35$$35$7205759403792804755$35$$35$d2TV lq_anf$36$$35$$35$7205759403792804755$35$$35$d2TV) (not (= Main.two 0)) (= lq_anf$36$$35$$35$7205759403792804756$35$$35$d2TW lit$36$horrible$32$death) (not (= Main.three 0)) (and (= lq_anf$36$$35$$35$7205759403792804757$35$$35$d2TX lq_anf$36$$35$$35$7205759403792804756$35$$35$d2TW) (= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792804757$35$$35$d2TX) (strLen lq_anf$36$$35$$35$7205759403792804756$35$$35$d2TW)) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792804757$35$$35$d2TX) 0)) (and (= VV$35$$35$F$35$$35$29 lq_anf$36$$35$$35$7205759403792804756$35$$35$d2TW) (= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29) (strLen lq_anf$36$$35$$35$7205759403792804756$35$$35$d2TW)) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29) 0) (= VV$35$$35$F$35$$35$29 lq_anf$36$$35$$35$7205759403792804757$35$$35$d2TX) (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$29) 0)) (= lq_anf$36$$35$$35$7205759403792804750$35$$35$d2TQ 1) (= lq_anf$36$$35$$35$7205759403792804751$35$$35$d2TR 1)))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(exit)
