1:1-1:1::Main.$trModule :: "GHC.Types.Module"
6:1-6:5::Main.zero :: "{v : GHC.Types.Int | v < 100\n                     && v mod 2 == 0\n                     && v >= 0\n                     && v == 0}"
9:1-9:4::Main.one :: "{v : GHC.Types.Int | v /= 0}"
10:1-10:4::Main.two :: "{v : GHC.Types.Int | v /= 0}"
11:1-11:6::Main.three :: "{v : GHC.Types.Int | v /= 0}"
29:1-29:4::Main.die :: "{VV : [GHC.Types.Char] | false} -> a"
29:5-29:8::msg :: "{VV : [GHC.Types.Char] | false}"
29:11-29:16::_ :: "{v : [GHC.Types.Char] | false} -> a"
31:1-31:10::Main.cannotDie :: "()"
31:16-31:21::lq_anf$##7205759403792804752 :: "GHC.Integer.Type.Integer"
31:18-31:19::_ :: "x1:GHC.Integer.Type.Integer -> x2:GHC.Integer.Type.Integer -> {v : GHC.Integer.Type.Integer | v == x1 + x2}"
31:22-31:24::_ :: "x1:GHC.Integer.Type.Integer -> x2:GHC.Integer.Type.Integer -> {v : GHC.Types.Bool | v <=> x1 == x2}"
32:20-32:40::lq_anf$##7205759403792804757 :: "[GHC.Types.Char]"
49:1-49:7::Main.divide :: "GHC.Types.Int -> {v : GHC.Types.Int | v /= 0} -> GHC.Types.Int"
49:8-49:9::n :: "GHC.Types.Int"
49:14-49:34::lq_anf$##7205759403792804765 :: "[GHC.Types.Char]"
50:14-50:23::ds_d2Td :: "{v : GHC.Types.Int | v /= 0}"
50:16-50:21::_ :: "x1:GHC.Types.Int -> x2:{v : GHC.Types.Int | v /= 0} -> {v : GHC.Types.Int | v == x1 / x2\n                                                                            && (x1 >= 0\n                                                                                && x2 >= 0 => v >= 0)\n                                                                            && (x1 >= 0\n                                                                                && x2 >= 1 => v <= x1)\n                                                                            && (1 < x2 => v < x1)\n                                                                            && (x2 >= 1 => v <= x1)}"
52:1-52:5::Main.avg2 :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
52:6-52:7::x :: "GHC.Types.Int"
52:8-52:9::y :: "GHC.Types.Int"
52:12-52:18::_ :: "{v : GHC.Types.Int -> {v : GHC.Types.Int | v /= 0} -> GHC.Types.Int | v == Main.divide}"
52:20-52:25::lq_anf$##7205759403792804766 :: "{v : GHC.Types.Int | v == x + y}"
52:22-52:23::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
53:1-53:5::Main.avg3 :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
53:6-53:7::x :: "GHC.Types.Int"
53:8-53:9::y :: "GHC.Types.Int"
53:10-53:11::z :: "GHC.Types.Int"
53:14-53:20::_ :: "{v : GHC.Types.Int -> {v : GHC.Types.Int | v /= 0} -> GHC.Types.Int | v == Main.divide}"
53:22-53:27::lq_anf$##7205759403792804768 :: "{v : GHC.Types.Int | v == x + y}"
53:24-53:25::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
53:28-53:29::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 + x2}"
57:1-57:4::Main.abs :: "GHC.Types.Int -> {v : GHC.Types.Int | v >= 0}"
57:5-57:6::n :: "GHC.Types.Int"
58:5-58:10::lq_anf$##7205759403792804791 :: "GHC.Types.Bool"
58:7-58:8::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 < x2}"
59:17-59:22::lq_anf$##7205759403792804793 :: "{v : GHC.Types.Int | v == (0 : int)}"
59:19-59:20::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
61:1-61:5::Main.calc :: "(GHC.Types.IO a)"
62:3-62:11::_ :: "{v : [GHC.Types.Char] -> (GHC.Types.IO ()) | v == System.IO.putStrLn}"
63:3-63:4::n :: "GHC.Types.Int"
63:8-63:14::_ :: "(GHC.Types.IO GHC.Types.Int)"
64:3-64:11::_ :: "{v : [GHC.Types.Char] -> (GHC.Types.IO ()) | v == System.IO.putStrLn}"
65:3-65:4::d :: "GHC.Types.Int"
65:8-65:14::_ :: "(GHC.Types.IO GHC.Types.Int)"
66:3-66:11::_ :: "{v : [GHC.Types.Char] -> (GHC.Types.IO ()) | v == System.IO.putStrLn}"
66:13-66:19::_ :: "{v : GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Char] | v == Main.result}"
69:1-69:7::Main.result :: "GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Char]"
69:8-69:9::n :: "GHC.Types.Int"
69:10-69:11::d :: "GHC.Types.Int"
70:5-70:15::_ :: "{v : x1:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 > 0} | v == Main.isPositive}"
70:20-70:54::lq_anf$##7205759403792804776 :: "[GHC.Types.Char]"
70:35-70:39::_ :: "GHC.Types.Int -> [GHC.Types.Char]"
70:41-70:53::lq_anf$##7205759403792804777 :: "GHC.Types.Int"
70:43-70:51::_ :: "{v : GHC.Types.Int -> {v : GHC.Types.Int | v /= 0} -> GHC.Types.Int | v == Main.divide}"
71:17-71:60::lq_anf$##7205759403792804774 :: "{v : GHC.Prim.Addr# | v == \"Humph, please enter positive denominator!\"}"
76:1-76:11::Main.isPositive :: "x1:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 > 0}"
76:12-76:13::x :: "GHC.Types.Int"
76:16-76:21::lq_anf$##7205759403792804771 :: "{v : GHC.Types.Int | v == (0 : int)}"
76:18-76:19::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 > x2}"
79:1-79:9::Main.truncate :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
79:10-79:11::i :: "GHC.Types.Int"
79:12-79:15::max :: "GHC.Types.Int"
80:5-80:15::lq_anf$##7205759403792804794 :: "{v : GHC.Types.Bool | v <=> i' <= max'}"
80:8-80:10::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 <= x2}"
81:17-81:39::max' :: "{v : GHC.Types.Int | v >= 0\n                     && v == max'}"
81:22-81:23::_ :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 * x2}"
81:25-81:38::lq_anf$##7205759403792804796 :: "GHC.Types.Int"
81:27-81:35::_ :: "{v : GHC.Types.Int -> {v : GHC.Types.Int | v /= 0} -> GHC.Types.Int | v == Main.divide}"
83:5-83:7::i' :: "{v : GHC.Types.Int | v >= 0}"
83:10-83:13::_ :: "{v : GHC.Types.Int -> {v : GHC.Types.Int | v >= 0} | v == Main.abs}"
84:5-84:9::max' :: "{v : GHC.Types.Int | v >= 0}"
84:12-84:15::_ :: "{v : GHC.Types.Int -> {v : GHC.Types.Int | v >= 0} | v == Main.abs}"